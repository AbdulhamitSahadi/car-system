// <auto-generated />
using System;
using CarSystem.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarSystem.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarSystem.API.Models.Domain.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminLevel")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("EntityId");

                    b.ToTable("AdminsApplications");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminDamageLicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("EntityId");

                    b.ToTable("AdminsDamageLicenses");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminDriver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("EntityId");

                    b.ToTable("AdminsDrivers");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminLicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("EntityId");

                    b.ToTable("AdminsLicenses");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminLicenseClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("EntityId");

                    b.ToTable("AdminsLicenseClasses");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminLostLicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("EntityId");

                    b.ToTable("AdminsLostLicenses");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminNationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("EntityId");

                    b.ToTable("AdminsNationalities");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("EntityId");

                    b.ToTable("AdminsOptions");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("EntityId");

                    b.ToTable("AdminsPermissions");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("EntityId");

                    b.ToTable("AdminsPeople");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("EntityId");

                    b.ToTable("AdminsQuestions");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminRenewalLicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("EntityId");

                    b.ToTable("AdminsRenewalLicenses");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminTakeTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("EntityId");

                    b.ToTable("AdminsTakeTests");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("EntityId");

                    b.ToTable("AdminsTests");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminTestCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("EntityId");

                    b.ToTable("AdminsTestCategories");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("EntityId");

                    b.ToTable("AdminsUsers");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminUserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("EntityId");

                    b.ToTable("AdminsUserPermissions");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminVisionTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("EntityId");

                    b.ToTable("AdminsVisionTests");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminWritingTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("EntityId");

                    b.ToTable("AdminsWritingTests");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("LicenseClassType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.DamageLicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateReported")
                        .HasColumnType("datetime2");

                    b.Property<int>("LicenseId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("LicenseId");

                    b.ToTable("DamageLicenses");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LicenseClassType")
                        .HasColumnType("int");

                    b.Property<int>("LicenseNumber")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("ReleaseType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("DriverId");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.LicenseClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("Fees")
                        .HasColumnType("float");

                    b.Property<int>("MinimumAllowedAge")
                        .HasColumnType("int");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ValidityLength")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LicenseClasses");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.LostLicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateReported")
                        .HasColumnType("datetime2");

                    b.Property<int>("LicenseId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("LicenseId");

                    b.ToTable("LostLicenses");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NationalityId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TakeTestId")
                        .HasColumnType("int");

                    b.Property<int>("TestCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TakeTestId");

                    b.HasIndex("TestCategoryId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.RenewalLicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LicenseId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RenewalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("LicenseId");

                    b.ToTable("RenewalLicenses");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.TakeTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TestCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TestCategoryId");

                    b.ToTable("TakeTests");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("Fees")
                        .HasColumnType("float");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TestCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("TestCategoryId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.TestCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Fees")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NumberOfQuestions")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TestCategories");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersPermissions");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.VisionTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TakeTestId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TakeTestId");

                    b.HasIndex("TestId");

                    b.ToTable("VisionTests");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.WritingTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TakeTestId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TakeTestId");

                    b.HasIndex("TestId");

                    b.ToTable("WrittenTests");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.Admin", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminApplication", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Admin", "Admin")
                        .WithMany("AdminsApplications")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.Application", "Entity")
                        .WithMany("Admins_Entities")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminDamageLicense", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Admin", "Admin")
                        .WithMany("AdminsDamageLicenses")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.DamageLicense", "Entity")
                        .WithMany("Admins_Entities")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminDriver", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Admin", "Admin")
                        .WithMany("AdminsDrivers")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.Driver", "Entity")
                        .WithMany("Admins_Entities")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminLicense", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Admin", "Admin")
                        .WithMany("AdminsLicenses")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.License", "Entity")
                        .WithMany("Admins_Entities")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminLicenseClass", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Admin", "Admin")
                        .WithMany("AdminsLicenseClasses")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.LicenseClass", "Entity")
                        .WithMany("Admins_Entities")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminLostLicense", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Admin", "Admin")
                        .WithMany("AdminsLostLicenses")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.LostLicense", "Entity")
                        .WithMany("Admins_Entities")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminNationality", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Admin", "Admin")
                        .WithMany("AdminsNationalities")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.Nationality", "Entity")
                        .WithMany("Admins_Entities")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminOption", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Admin", "Admin")
                        .WithMany("AdminsOptions")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.Option", "Entity")
                        .WithMany("Admins_Entities")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminPermission", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Admin", "Admin")
                        .WithMany("Admins_Entities")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.Permission", "Entity")
                        .WithMany("Admins_Entities")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminPerson", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Admin", "Admin")
                        .WithMany("AdminsPeople")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.Person", "Entity")
                        .WithMany("Admins_Entities")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminQuestion", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Admin", "Admin")
                        .WithMany("AdminsQuestions")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.Question", "Entity")
                        .WithMany("Admins_Entities")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminRenewalLicense", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Admin", "Admin")
                        .WithMany("AdminsRenewalLicenses")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.RenewalLicense", "Entity")
                        .WithMany("Admins_Entities")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminTakeTest", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.TakeTest", "Entity")
                        .WithMany("Admins_Entities")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminTest", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Admin", "Admin")
                        .WithMany("AdminsTests")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.Test", "Entity")
                        .WithMany("Admins_Entities")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminTestCategory", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.TestCategory", "Entity")
                        .WithMany("Admins_Entities")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminUser", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.User", "Entity")
                        .WithMany("Admins_Entities")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminUserPermission", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Admin", "Admin")
                        .WithMany("AdminsUserPermissions")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.UserPermission", "Entity")
                        .WithMany("Admins_Entities")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminVisionTest", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Admin", "Admin")
                        .WithMany("AdminsVisionTests")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.VisionTest", "Entity")
                        .WithMany("Admins_Entities")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.AdminDomainModels.AdminWritingTest", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Admin", "Admin")
                        .WithMany("AdminsWritingTests")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.WritingTest", "Entity")
                        .WithMany("Admins_Entities")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.Application", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.DamageLicense", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.License", "License")
                        .WithMany("DamageLicenses")
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("License");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.Driver", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.License", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.Driver", "Driver")
                        .WithMany("OwnedLicenses")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.LostLicense", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.License", "License")
                        .WithMany("LostLicenses")
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("License");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.Option", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.Person", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Nationality", "Nationality")
                        .WithMany("People")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.Question", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.TakeTest", null)
                        .WithMany("Questions")
                        .HasForeignKey("TakeTestId");

                    b.HasOne("CarSystem.API.Models.Domain.TestCategory", "TestCategory")
                        .WithMany()
                        .HasForeignKey("TestCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TestCategory");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.RenewalLicense", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.License", "License")
                        .WithMany("RenewalLicenses")
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("License");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.TakeTest", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.TestCategory", "TestCategory")
                        .WithMany()
                        .HasForeignKey("TestCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TestCategory");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.Test", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.TestCategory", "TestCategory")
                        .WithMany()
                        .HasForeignKey("TestCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("TestCategory");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.User", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.UserPermission", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.Permission", "Permission")
                        .WithMany("UsersPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.VisionTest", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.TakeTest", "TakeTest")
                        .WithMany()
                        .HasForeignKey("TakeTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.Test", "Test")
                        .WithMany("VisionTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TakeTest");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.WritingTest", b =>
                {
                    b.HasOne("CarSystem.API.Models.Domain.TakeTest", "TakeTest")
                        .WithMany()
                        .HasForeignKey("TakeTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSystem.API.Models.Domain.Test", "Test")
                        .WithMany("WrittenTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TakeTest");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.Admin", b =>
                {
                    b.Navigation("AdminsApplications");

                    b.Navigation("AdminsDamageLicenses");

                    b.Navigation("AdminsDrivers");

                    b.Navigation("AdminsLicenseClasses");

                    b.Navigation("AdminsLicenses");

                    b.Navigation("AdminsLostLicenses");

                    b.Navigation("AdminsNationalities");

                    b.Navigation("AdminsOptions");

                    b.Navigation("AdminsPeople");

                    b.Navigation("AdminsQuestions");

                    b.Navigation("AdminsRenewalLicenses");

                    b.Navigation("AdminsTests");

                    b.Navigation("AdminsUserPermissions");

                    b.Navigation("AdminsVisionTests");

                    b.Navigation("AdminsWritingTests");

                    b.Navigation("Admins_Entities");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.Application", b =>
                {
                    b.Navigation("Admins_Entities");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.DamageLicense", b =>
                {
                    b.Navigation("Admins_Entities");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.Driver", b =>
                {
                    b.Navigation("Admins_Entities");

                    b.Navigation("OwnedLicenses");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.License", b =>
                {
                    b.Navigation("Admins_Entities");

                    b.Navigation("DamageLicenses");

                    b.Navigation("LostLicenses");

                    b.Navigation("RenewalLicenses");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.LicenseClass", b =>
                {
                    b.Navigation("Admins_Entities");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.LostLicense", b =>
                {
                    b.Navigation("Admins_Entities");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.Nationality", b =>
                {
                    b.Navigation("Admins_Entities");

                    b.Navigation("People");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.Option", b =>
                {
                    b.Navigation("Admins_Entities");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.Permission", b =>
                {
                    b.Navigation("Admins_Entities");

                    b.Navigation("UsersPermissions");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.Person", b =>
                {
                    b.Navigation("Admins_Entities");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.Question", b =>
                {
                    b.Navigation("Admins_Entities");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.RenewalLicense", b =>
                {
                    b.Navigation("Admins_Entities");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.TakeTest", b =>
                {
                    b.Navigation("Admins_Entities");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.Test", b =>
                {
                    b.Navigation("Admins_Entities");

                    b.Navigation("VisionTests");

                    b.Navigation("WrittenTests");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.TestCategory", b =>
                {
                    b.Navigation("Admins_Entities");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.User", b =>
                {
                    b.Navigation("Admins_Entities");

                    b.Navigation("Applications");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.UserPermission", b =>
                {
                    b.Navigation("Admins_Entities");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.VisionTest", b =>
                {
                    b.Navigation("Admins_Entities");
                });

            modelBuilder.Entity("CarSystem.API.Models.Domain.WritingTest", b =>
                {
                    b.Navigation("Admins_Entities");
                });
#pragma warning restore 612, 618
        }
    }
}
